<?xml version="1.0"?>
<project name="build" default="build.all" basedir="../">
    <description>
        Build a new distribution of the CFCouchbase SDK
    </description>

    <!-- Version: UPDATE ON EACH RELEASE AS NEEDED -->
    <property name="groupID"                value="ortussolutions" />
    <property name="cfcouchbase.version"    value="3.0.1"/>
    <property name="cfcouchbase.slug"       value="cfcouchbase"/>

	<!-- Build Labels -->
    <tstamp prefix="start"/>
    <!-- Load Contrib Tasks -->
    <path id="cp">
        <fileset dir="build/lib">
            <include name="**/*.jar" />
        </fileset>
    </path>
    <!-- Define Tasks -->
    <taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="cp" />
    <!-- Import Box-Repo Tasks -->
    <import><url url="https://raw.githubusercontent.com/Ortus-Solutions/box-tasks/master/box-repo.xml"/></import>

    <!-- Init -->
    <target name="init" description="Init" unless="src.isInit">
        <!-- Default environment check, if not passed via -Denvironment -->
        <condition property="environment" value="local">
            <not><isset property="environment" /></not>
        </condition>
        <if>
            <available file="build/build-${environment}.properties" />
            <then>
                <!-- Load env properties -->
                <echo>Loading properties from environment: ${environment}</echo>
                <loadproperties srcFile="build/build-${environment}.properties"/>
            </then>
        </if>

        <!-- Load root properties -->
        <echo>Loading base properties</echo>
        <loadproperties srcFile="build/build.properties"/>

        <!-- Property defaults -->
		<condition property="cfengine" else="lucee@5">
	      <isset property="cfengine"/>
	    </condition>
		<condition property="isTravis" else="false">
	      <isset property="isTravis"/>
	    </condition>
	    <condition property="build.branch" else="development">
	      <isset property="build.branch"/>
	    </condition>

        <!-- Build Number -->
		<if>
			<not><isset property="build.number" /></not>
			<then>
				<propertyfile file="build/build.number" comment="Build Number for ANT. Edit not!">
					<entry key="build.number"
							type="int"
					     	operation="+"
							pattern="00000"
					     	default="1" />
				</propertyfile>

				<property file="build/build.number"/>

			</then>
		</if>


		<!-- Determine snapshot vs master artifact -->
		<if>
			<equals arg1="${build.branch}" arg2="development" />
			<then>
    			<property name="cfcouchbase.version.full" value="${cfcouchbase.version}-snapshot"/>
			</then>
			<else>
    			<property name="cfcouchbase.version.full" value="${cfcouchbase.version}+${build.number}"/>
			</else>
		</if>

        <!-- Build Label -->
        <property name="build.label" value="cfcouchbase-${cfcouchbase.version.full}-${start.DSTAMP}${start.TSTAMP}"/>
        <property name="dir.exports" value="${dir.artifacts}/${cfcouchbase.slug}/${cfcouchbase.version.full}"/>

        <!-- Get Build Dependencies -->
        <antcall target="getDependencies" />

        <!-- Cleanup + Init -->
        <delete dir="${dir.build}" />
        <mkdir dir="${dir.build}"/>
    	<chmod file="${dir.build}/**" perm="og+wrs" type="both" />

    	<!-- Mark as init -->
        <property name="src.isInit" value="true" />
    </target>

    <!-- Build test reports -->
    <target name="run-tests" description="execute test suite" depends="init">

        <property name="serverName" value="${cfengine}"/>

        <echo>========= Running CFEngine Tests for: ${cfengine} ==============</echo>

    	<antcall target="startServer" inheritRefs="true" />

        <trycatch property="testcatch">
            <try>

                <subant target="runEngine">
		          	<fileset dir="tests" includes="test.xml"/>
		    		<property name="engine" value="${cfengine}" />
		    		<property name="environment" value="${environment}" />
		        </subant>

            </try>
            <catch>
                <echo>Error Executing tests: ${testcatch}</echo>
            </catch>
        </trycatch>

        <antcall target="stopServer" inheritRefs="true" />

		<echo>========= CFEngine Tests for ${cfengine} completed. ==============</echo>
    </target>

    <!--build-->
    <target name="build.sdk" description="Build the SDK distribution" depends="init">
        <!-- Copy build ID -->
    	<concat destfile="${dir.build}/${build.label}">Built on ${start.TODAY}</concat>
    	<concat destfile="${dir.build}/version.json">{ "version" : "${cfcouchbase.version.full}" }</concat>

        <!-- Copy Src -->
        <copy todir="${dir.build}" encoding="UTF-8">
            <fileset dir="cfcouchbase" />
        </copy>

        <!--Copy text files to root folder-->
        <copy todir="${dir.build}" encoding="UTF-8">
            <fileset file="LICENSE" />
            <fileset file="README.md" />
        </copy>

    	<!--Copy samples-->
        <copy todir="${dir.build}/samples" encoding="UTF-8">
        	<fileset dir="samples" />
        </copy>

        <!-- Replace Version + Build Numbers -->
        <!-- Semantic Versioning for Unstable Builds -->
        <echo>Updating placeholders for version ${cfcouchbase.version.full}, branch ${build.branch}, build ${build.number}</echo>

		<replaceregexp match='@build\.version@\+@build\.number@' replace="${cfcouchbase.version.full}" flags="ig" byline="true" encoding="UTF-8">
			<fileset dir="${dir.build}" />
		</replaceregexp>

		<!-- Replace any remaining placeholders for only build number -->
		<replaceregexp match='@build\.version@' replace="${cfcouchbase.version}" flags="ig" byline="true" encoding="UTF-8">
			<fileset dir="${dir.build}" />
		</replaceregexp>


        <!-- Zip Distro -->
        <zip destfile="${dir.exports}/${cfcouchbase.slug}-${cfcouchbase.version.full}.zip" basedir="${dir.build}">
        	<exclude name="version.json" />
        </zip>
    </target>

	<!-- Build all distributions -->
	<target name="build.all" description="Build all distributions" depends="build.sdk,build.apidocs,build.samples">
		<!-- Build Checksum -->
		<checksum forceoverwrite="true" fileext=".md5">
			<fileset dir="${dir.exports}">
				<include name="*.zip" />
			</fileset>
		</checksum>
        <checksum forceoverwrite="true" algorithm="SHA-512" fileext=".sha512">
            <fileset dir="${dir.exports}">
                <include name="*.zip" />
            </fileset>
        </checksum>
        <copy toDir="${dir.exports}" file="${dir.build}/box.json" overwrite="true" />
		<!-- Create Box Repo From macrodef -->
        <box-repo location="${dir.exports}"
                  artifactID="${cfcouchbase.slug}"
                  buildID="${build.number}"
                  groupID="${groupID}"
                  latest="${cfcouchbase.version.full}"
                  classifiers="apidocs,samples"/>
	</target>

	<!-- Build Samples -->
	<target name="build.samples" description="Build the samples" depends="init">
		<!-- Zip Samples -->
        <zip destfile="${dir.exports}/${cfcouchbase.slug}-samples-${cfcouchbase.version.full}.zip" basedir="samples"></zip>
	</target>

	<!-- Build API Docs -->
	<target name="build.apidocs" description="Build the API docs" depends="init">
		<!-- Create API apidocs dir -->
        <mkdir dir="${dir.api}"/>
        <!-- Install dependencies for docs -->
        <exec executable="box" dir="${dir.apidocs}">
            <arg line="install --force" />
        </exec>
        <!-- Startup the apidocs server, wait for a few seconds for server to start -->
        <exec executable="box" dir="${dir.apidocs}">
            <arg line="server start openbrowser=false --force port=${apidocs.port}" />
        </exec>
        <sleep seconds="5"/>
        <!-- Get the apidocs now -->
        <get dest="${dir.build}/docbox.html"
             src="${url.apidocs}?version=${cfcouchbase.version.full}&amp;path=${dir.api}"
             verbose="true"
             retries="5"/>
        <!-- stop server -->
        <exec executable="box" dir="${dir.apidocs}">
            <arg line="server stop" />
        </exec>
        <delete file="${dir.build}/docbox.html" />
        <!-- Zip API Docs -->
        <zip destfile="${dir.exports}/${cfcouchbase.slug}-apidocs-${cfcouchbase.version.full}.zip" basedir="${dir.api}"></zip>
	</target>

    <!-- Get Dependencies -->
    <target name="getDependencies" description="Get all the necessary dependencies for the build process">
        <!-- Install dependencies for project -->
        <exec executable="box" dir="${basedir}">
            <arg line="install --force" />
        </exec>
    </target>

    <target name="startServer" description="Starts a single server">
		<exec executable="box" dir="${basedir}">
			<arg line="server start --debug name=${serverName} directory=${basedir} serverConfigFile=${basedir}/build/servers/server-${serverName}.json" />
		</exec>
	</target>

	<target name="stopServer" description="Stops a single server">
		<exec executable="box" dir="${basedir}">
			<arg line="server stop name=${serverName} directory=${basedir} serverConfigFile=${basedir}/build/servers/server-${serverName}.json" />
		</exec>
	</target>

</project>
